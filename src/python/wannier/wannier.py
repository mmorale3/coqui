"""
==========================================================================
CoQuí: Correlated Quantum ínterface

Copyright (c) 2022-2025 Simons Foundation & The CoQuí developer team

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==========================================================================
"""

import json

from coqui._lib import wannier_module 

# no returns yet, decide what and how to return later

def wannier90(mf, params):
  """
  Generates MLWF, using Wannier90 in library mode. A *.win file is required with this routine. 
  This routine is equivalent to executing the following commands, with a given prefix.win file:
    wannier90.x -pp prefix
    pw2wannier90.x param_file
    wannier90.x prefix

  Parameters
  ----------
  mf : coqui Mf class
    The mean-field handler for the target system.

  params: dict
    Parameters for the Wannier90 calculation. Supported parameters are: 

      - prefix: string, required.
        Equivalent to wannier90's seedname.
        The file prefix.win must exist and should contain wannier90 parameters.
        The file does not need to contain the following parameters, they are supplied by CoQui. 
        If they exist, they must be consistent with CoQui's values.
          1. atoms_cart/atoms_frac block,
          2. unit_cell_cart block.
        The kpoints block can be provided and can be different from CoQui's internal kpoint list,
        as long as they represent an equivalent list of kpoints, (e.g same list of kpoints, 
        up to lattice translation) 
        
      - write_mmn: bool, default=False
        If True, write overlap file, prefix.mmn.

      - write_amn: bool, default=False
        If True, write initial projections file, prefix.amn.

      - write_eig: bool, default=False
        If True, write eigenvalue file, prefix.eig.

      - write_nnkp: bool, default=False
        If True, write postprocessing file, prefix.nnkp. 
        Equivalent to executing wannier90.x -pp prefix

      - write_modest: bool, default=True
        If True, write ModEST's h5 file. Can be used to interface with ModEST for 
        quantum embedding calculations. 

    Options used during ModEST h5 generation: 

      - dset_name: string, default = "dft_input".
        Name of h5 dataset.

      Shell information. Each option, if included, must be an array of the same length.
        Each element in the array corresponds to a given shell.
        If the number of shells is greater than 1, shells.dim must be provided. 

        - shells.atoms: Array, default = [0].
          Atom id of the shell.

        - shells.sort: Array, default = [0].

        - shells.l: Array, default = [0].
          Angular momentum of each shell.
           
        - shells.dim: Array, default = [num_wann].
          Number of wannier orbitals in each shell. The sum must be smaller or equal to num_wann.
          No reordering of wannier orbitals is currently allowed, orbitals are taken in the order
          generated by wannier90.

        - shells.SO: Array, default = [0].
         
        - shells.irrep: Array, default = [0].

      - charge_below: integer, default = 0
      
      - density_required: double, default = total charge in included bands.

      - bloch_basis: bool, default = True.  (Only True currently allowed/implemented)
        If True, returns hamiltonian matrix elements in bloch basis.
        Otherwise, returns hamiltonian matrix elements in wannier basis.

    (Advanced) Options for the generation of initial projections:
     
      - r0: double, default = exp(-6).
        Initial point in the radial grid used to solve the spherical bessel transform.
        The actual initial point used in the evaluation is scaled by zona, the coefficient
        in the exponent of the radial function.

      - rN: double, default = 10.0.
        Last point in the radial grid used to solve the spherical bessel transform.
        The actual last point used in the evaluation is scaled by zona, the coefficient
        in the exponent of the radial function.

      - nr: integer, default = 333.
        Number of points in the radial grid.

  Returns
  -------
  """
  wannier_module.wannier90_library_mode(mf,json.dumps(params)) 

def coqui2wannier90(mf, params):
  """
  Generates the overlap, initial projection and eigenvalue files for a subsequent
  wannier90 calculation. The prefix.nnkp file is required.  
  This routine is equivalent to executing: 
    pw2wannier90.x param_file

  Parameters
  ----------
  mf : coqui Mf class
    The mean-field handler for the target system.

  params: dict
    Parameters for CoQui to Wannier90 converter. Supported parameters are: 

      - prefix: string, required.
        Equivalent to wannier90's seedname.
        The file prefix.nnkp must exist, as generated by wannier90.x -pp prefix.
        The file does not need to contain the following parameters, they are supplied by CoQui. 
        If they exist, they must be consistent with CoQui's values.
          1. real_lattice 
          2. recip_lattice 
        The kpoints block can be provided and can be different from CoQui's internal kpoint list,
        as long as they represent an equivalent list of kpoints, (e.g same list of kpoints, 
        up to lattice translation) 
        
      - write_mmn: bool, default=False
        If True, write overlap file, prefix.mmn.

      - write_amn: bool, default=False
        If True, write initial projections file, prefix.amn.

      - write_eig: bool, default=False
        If True, write eigenvalue file, prefix.eig.

  """
  wannier_module.coqui2wannier90(mf,json.dumps(params)) 

def append_wannier90_win(mf, prefix):
  """
  Appends 1. atoms_cart, 2. unit_cell_cart and 3. kpoints blocks to a given Wannier90's win file.

  Parameters
  ----------
  mf : coqui Mf class
    The mean-field handler for the target system.

  prefix: string, required.
    A pre-existing wannier90 win file.
        
  """
  wannier_module.wannier90_append_win(mf,prefix) 
